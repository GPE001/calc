{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","_this2","this","react_default","a","createElement","className","concat","props","children","onClick","handleClick","Component","Input","ClearButton","_this","handleClear","App","Object","classCallCheck","_super","call","addToInput","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","previousNumber","operator","subtract","multiply","divide","evaluate","currentNumber","parseInt","src_components_Input","src_components_Button","src_components_ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58f1575c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n  isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n  };\r\n\r\n  render() {\r\n    return( \r\n      <div \r\n        className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\r\n        onClick={() => this.props.handleClick(this.props.children)}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport \"./Input.css\";\r\n\r\nclass Input extends Component {\r\n  render() {\r\n    return( \r\n      <div className=\"input\">\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from \"react\";\r\nimport \"./ClearButton.css\";\r\n\r\nclass ClearButton extends Component {\r\n  render() {\r\n    return( \r\n      <div \r\n        className=\"clear-btn\"\r\n        onClick={() => this.props.handleClear()}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClearButton;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Button from \"./components/Button\";\r\nimport Input from \"./components/Input\";\r\nimport ClearButton from \"./components/ClearButton\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      input: \"\",\r\n      previousNumber: \"\",\r\n      currentNumber: \"\",\r\n      operator: \"\"\r\n    };\r\n  }\r\n\r\n  addToInput = val => {\r\n    this.setState({ input: this.state.input + val });\r\n  };\r\n\r\n  addDecimal = val => {\r\n    // only add decimal if there is no current decimal point present in the input area\r\n    if (this.state.input.indexOf(\".\") === -1) {\r\n      this.setState({ input: this.state.input + val });\r\n    }\r\n  };\r\n\r\n  addZeroToInput = val => {\r\n    // if this.state.input is not empty then add zero\r\n    if (this.state.input !== \"\") {\r\n      this.setState({ input: this.state.input + val });\r\n    }\r\n  };\r\n\r\n  clearInput = () => {\r\n    this.setState({ input: \"\" });\r\n  };\r\n\r\n  add = () => {\r\n    this.state.previousNumber = this.state.input;\r\n    this.setState({ input: \"\" });\r\n    this.state.operator = \"plus\";\r\n  };\r\n\r\n  subtract = () => {\r\n    this.state.previousNumber = this.state.input;\r\n    this.setState({ input: \"\" });\r\n    this.state.operator = \"subtract\";\r\n  };\r\n  \r\n  multiply = () => {\r\n    this.state.previousNumber = this.state.input;\r\n    this.setState({ input: \"\" });\r\n    this.state.operator = \"multiply\";\r\n  };\r\n\r\n  divide = () => {\r\n    this.state.previousNumber = this.state.input;\r\n    this.setState({ input: \"\" });\r\n    this.state.operator = \"divide\";\r\n  };\r\n\r\n  evaluate = () => {\r\n    this.state.currentNumber = this.state.input;\r\n\r\n    if (this.state.operator == \"plus\") {\r\n      this.setState({\r\n        input:\r\n          parseInt(this.state.previousNumber) +\r\n          parseInt(this.state.currentNumber)\r\n      });\r\n    } else if (this.state.operator == \"subtract\") {\r\n      this.setState({\r\n        input:\r\n          parseInt(this.state.previousNumber) -\r\n          parseInt(this.state.currentNumber)\r\n      });\r\n    } else if (this.state.operator == \"multiply\") {\r\n      this.setState({\r\n        input:\r\n          parseInt(this.state.previousNumber) *\r\n          parseInt(this.state.currentNumber)\r\n      });\r\n    } else if (this.state.operator == \"divide\") {\r\n      this.setState({\r\n        input:\r\n          parseInt(this.state.previousNumber) /\r\n          parseInt(this.state.currentNumber)\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        11111111111111111111111111111\r\n        <div className=\"calc-wrapper\">\r\n          <div className=\"row\">\r\n            <Input>{this.state.input}</Input>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button handleClick={this.addToInput}>7</Button>\r\n            <Button handleClick={this.addToInput}>8</Button>\r\n            <Button handleClick={this.addToInput}>9</Button>\r\n            <Button handleClick={this.divide}>/</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button handleClick={this.addToInput}>4</Button>\r\n            <Button handleClick={this.addToInput}>5</Button>\r\n            <Button handleClick={this.addToInput}>6</Button>\r\n            <Button handleClick={this.multiply}>*</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button handleClick={this.addToInput}>1</Button>\r\n            <Button handleClick={this.addToInput}>2</Button>\r\n            <Button handleClick={this.addToInput}>3</Button>\r\n            <Button handleClick={this.add}>+</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button handleClick={this.addDecimal}>.</Button>\r\n            <Button handleClick={this.addZeroToInput}>0</Button>\r\n            <Button handleClick={this.evaluate}>=</Button>\r\n            <Button handleClick={this.subtract}>-</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}